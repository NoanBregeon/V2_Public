/**
 * Gestionnaire de permissions centralis√©
 * S√©curit√© renforc√©e pour les commandes Twitch sp√©cialis√©es
 */

class PermissionManager {
    constructor(config) {
        this.config = config;
        
        // Commandes Twitch n√©cessitant des permissions d'administrateur
        this.twitchAdminCommands = [
            'twitch-vip',
            'twitch-mod', 
            'assign-vip-role',
            'assign-mod-role',
            'manage-subscriber',
            'promote-vip',
            'demote-vip',
            'add-moderator',
            'remove-moderator'
        ];
    }

    /**
     * V√©rifie si l'utilisateur est administrateur Discord
     */
    isAdmin(member) {
        return member.permissions.has('Administrator');
    }

    /**
     * V√©rifie si l'utilisateur est mod√©rateur (r√¥le configur√©)
     */
    isModerator(member) {
        if (this.isAdmin(member)) return true;
        if (!this.config.moderatorRoleId) return false;
        return member.roles.cache.has(this.config.moderatorRoleId);
    }

    /**
     * V√©rification stricte pour les commandes Twitch sensibles
     * Seuls les administrateurs Discord peuvent g√©rer les r√¥les VIP/Mod
     */
    canUseTwitchAdminCommand(member, commandName) {
        if (!this.twitchAdminCommands.includes(commandName)) {
            return true; // Commande non sensible
        }
        
        // Pour les commandes sensibles, seuls les administrateurs
        return this.isAdmin(member);
    }

    /**
     * V√©rification pour les commandes Twitch de base
     */
    canUseTwitchCommand(member) {
        return this.isModerator(member);
    }

    /**
     * Messages d'erreur standardis√©s
     */
    getPermissionError(requiredLevel = 'mod√©rateur') {
        const messages = {
            'administrateur': '‚ùå **Acc√®s refus√©** - Cette commande est r√©serv√©e aux **Administrateurs** uniquement.',
            'mod√©rateur': '‚ùå **Acc√®s refus√©** - Cette commande n√©cessite le r√¥le **Mod√©rateur** ou sup√©rieur.'
        };
        
        return messages[requiredLevel] || messages['mod√©rateur'];
    }

    /**
     * Log des tentatives d'acc√®s non autoris√©es
     */
    logUnauthorizedAccess(member, commandName, channelId) {
        console.warn(`üö® Tentative d'acc√®s non autoris√©e:
        - Utilisateur: ${member.user.tag} (${member.id})
        - Commande: ${commandName}
        - Canal: ${channelId}
        - Permissions: Admin=${this.isAdmin(member)}, Mod=${this.isModerator(member)}`);
    }
}

module.exports = PermissionManager;
