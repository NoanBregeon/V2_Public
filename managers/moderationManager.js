const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');

class ModerationManager {
    constructor(client, config) {
        this.client = client;
        this.config = config;
        this.twitchAPI = null; // √Ä initialiser avec l'API Twitch
    }

    async initialize() {
        console.log('üõ°Ô∏è Initialisation du ModerationManager...');
        // Initialiser l'API Twitch si n√©cessaire
        console.log('‚úÖ ModerationManager initialis√©');
    }

    // Gestion des commandes Discord
    async handleDiscordCommand(interaction, command) {
        switch (command) {
            case 'addmodo':
                await this.addModerator(interaction);
                break;
            case 'removemodo':
                await this.removeModerator(interaction);
                break;
            case 'addvip':
                await this.addVIP(interaction);
                break;
            case 'removevip':
                await this.removeVIP(interaction);
                break;
            case 'listmods':
                await this.listModerators(interaction);
                break;
            case 'listvips':
                await this.listVIPs(interaction);
                break;
        }
    }

    // Nouvelle m√©thode pour g√©rer les commandes de mod√©ration Discord
    async handleDiscordModerationCommand(interaction, command) {
        switch (command) {
            case 'mute':
                await this.muteUser(interaction);
                break;
            case 'unmute':
                await this.unmuteUser(interaction);
                break;
            case 'kick':
                await this.kickUser(interaction);
                break;
            case 'discordban':
                await this.banDiscordUser(interaction);
                break;
            case 'unban':
                await this.unbanDiscordUser(interaction);
                break;
            case 'warn':
                await this.warnUser(interaction);
                break;
            case 'userinfo':
                await this.showUserInfo(interaction);
                break;
            case 'listbans':
                await this.listBans(interaction);
                break;
        }
    }

    async addModerator(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const member = await interaction.guild.members.fetch(user.id);
        
        const moderatorRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('mod√©rateur') || 
            role.name.toLowerCase().includes('moderateur') ||
            role.name.toLowerCase().includes('mod')
        );

        if (!moderatorRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le mod√©rateur trouv√©. Cr√©ez un r√¥le contenant "mod√©rateur" dans son nom.',
                ephemeral: true
            });
        }

        try {
            await member.roles.add(moderatorRole);
            
            const embed = new EmbedBuilder()
                .setTitle('üõ°Ô∏è Mod√©rateur ajout√©')
                .setDescription(`${user} a √©t√© promu mod√©rateur`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'R√¥le', value: moderatorRole.name, inline: true },
                    { name: 'Par', value: interaction.user.tag, inline: true }
                )
                .setColor(0x00FF00)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üõ°Ô∏è ${user.tag} promu mod√©rateur par ${interaction.user.tag}`);
        } catch (error) {
            console.error('Erreur ajout mod√©rateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de l\'ajout du r√¥le mod√©rateur',
                ephemeral: true
            });
        }
    }

    async removeModerator(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const member = await interaction.guild.members.fetch(user.id);
        
        const moderatorRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('mod√©rateur') || 
            role.name.toLowerCase().includes('moderateur') ||
            role.name.toLowerCase().includes('mod')
        );

        if (!moderatorRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le mod√©rateur trouv√©.',
                ephemeral: true
            });
        }

        try {
            await member.roles.remove(moderatorRole);
            
            const embed = new EmbedBuilder()
                .setTitle('üõ°Ô∏è Mod√©rateur retir√©')
                .setDescription(`${user} n'est plus mod√©rateur`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'R√¥le retir√©', value: moderatorRole.name, inline: true },
                    { name: 'Par', value: interaction.user.tag, inline: true }
                )
                .setColor(0xFF6600)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üõ°Ô∏è ${user.tag} r√©trograd√© par ${interaction.user.tag}`);
        } catch (error) {
            console.error('Erreur retrait mod√©rateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du retrait du r√¥le mod√©rateur',
                ephemeral: true
            });
        }
    }

    async addVIP(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const member = await interaction.guild.members.fetch(user.id);
        
        const vipRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('vip')
        );

        if (!vipRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le VIP trouv√©. Cr√©ez un r√¥le contenant "VIP" dans son nom.',
                ephemeral: true
            });
        }

        try {
            await member.roles.add(vipRole);
            
            const embed = new EmbedBuilder()
                .setTitle('‚≠ê VIP ajout√©')
                .setDescription(`${user} est maintenant VIP`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'R√¥le', value: vipRole.name, inline: true },
                    { name: 'Par', value: interaction.user.tag, inline: true }
                )
                .setColor(0xFFD700)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`‚≠ê ${user.tag} promu VIP par ${interaction.user.tag}`);
        } catch (error) {
            console.error('Erreur ajout VIP:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de l\'ajout du r√¥le VIP',
                ephemeral: true
            });
        }
    }

    async removeVIP(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const member = await interaction.guild.members.fetch(user.id);
        
        const vipRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('vip')
        );

        if (!vipRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le VIP trouv√©.',
                ephemeral: true
            });
        }

        try {
            await member.roles.remove(vipRole);
            
            const embed = new EmbedBuilder()
                .setTitle('‚≠ê VIP retir√©')
                .setDescription(`${user} n'est plus VIP`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'R√¥le retir√©', value: vipRole.name, inline: true },
                    { name: 'Par', value: interaction.user.tag, inline: true }
                )
                .setColor(0xFF6600)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`‚≠ê ${user.tag} VIP retir√© par ${interaction.user.tag}`);
        } catch (error) {
            console.error('Erreur retrait VIP:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du retrait du r√¥le VIP',
                ephemeral: true
            });
        }
    }

    async listModerators(interaction) {
        const moderatorRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('mod√©rateur') || 
            role.name.toLowerCase().includes('moderateur') ||
            role.name.toLowerCase().includes('mod')
        );

        if (!moderatorRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le mod√©rateur trouv√©.',
                ephemeral: true
            });
        }

        const moderators = moderatorRole.members.map(member => member.user.tag).join('\n') || 'Aucun mod√©rateur';

        const embed = new EmbedBuilder()
            .setTitle('üõ°Ô∏è Liste des mod√©rateurs')
            .setDescription(moderators.length > 1024 ? moderators.substring(0, 1021) + '...' : moderators)
            .addFields({ name: 'Total', value: `${moderatorRole.members.size} mod√©rateur(s)`, inline: true })
            .setColor(0x0099FF)
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    async listVIPs(interaction) {
        const vipRole = interaction.guild.roles.cache.find(role => 
            role.name.toLowerCase().includes('vip')
        );

        if (!vipRole) {
            return await interaction.reply({
                content: '‚ùå Aucun r√¥le VIP trouv√©.',
                ephemeral: true
            });
        }

        const vips = vipRole.members.map(member => member.user.tag).join('\n') || 'Aucun VIP';

        const embed = new EmbedBuilder()
            .setTitle('‚≠ê Liste des VIPs')
            .setDescription(vips.length > 1024 ? vips.substring(0, 1021) + '...' : vips)
            .addFields({ name: 'Total', value: `${vipRole.members.size} VIP(s)`, inline: true })
            .setColor(0xFFD700)
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    async muteUser(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const duration = interaction.options.getInteger('duree'); // en minutes
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';

        try {
            const member = await interaction.guild.members.fetch(user.id);
            const timeoutDuration = duration * 60 * 1000; // Convertir en millisecondes
            
            await member.timeout(timeoutDuration, reason);
            
            const embed = new EmbedBuilder()
                .setTitle('üîá Utilisateur mut√©')
                .setDescription(`${user} a √©t√© mis en timeout`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'Dur√©e', value: `${duration} minute(s)`, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true },
                    { name: 'Expire le', value: `<t:${Math.floor((Date.now() + timeoutDuration) / 1000)}:F>`, inline: false }
                )
                .setColor(0xFF6600)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üîá ${user.tag} mut√© pour ${duration}min par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur mute utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du mute de l\'utilisateur. V√©rifiez que j\'ai les permissions et que l\'utilisateur n\'est pas un mod√©rateur.',
                ephemeral: true
            });
        }
    }

    async unmuteUser(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';

        try {
            const member = await interaction.guild.members.fetch(user.id);
            await member.timeout(null, reason);
            
            const embed = new EmbedBuilder()
                .setTitle('üîä Utilisateur d√©mut√©')
                .setDescription(`${user} a √©t√© d√©mut√©`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                )
                .setColor(0x00FF00)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üîä ${user.tag} d√©mut√© par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur unmute utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du d√©mute de l\'utilisateur.',
                ephemeral: true
            });
        }
    }

    async kickUser(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';

        try {
            const member = await interaction.guild.members.fetch(user.id);
            
            if (!member.kickable) {
                return await interaction.reply({
                    content: '‚ùå Impossible d\'expulser cet utilisateur (permissions insuffisantes).',
                    ephemeral: true
                });
            }

            await member.kick(reason);
            
            const embed = new EmbedBuilder()
                .setTitle('üë¢ Utilisateur expuls√©')
                .setDescription(`${user} a √©t√© expuls√© du serveur`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                )
                .setColor(0xFF0000)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üë¢ ${user.tag} expuls√© par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur kick utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de l\'expulsion de l\'utilisateur.',
                ephemeral: true
            });
        }
    }

    async banDiscordUser(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';
        const deleteMessages = interaction.options.getInteger('supprimer_messages') || 0;

        try {
            const member = await interaction.guild.members.fetch(user.id).catch(() => null);
            
            if (member && !member.bannable) {
                return await interaction.reply({
                    content: '‚ùå Impossible de bannir cet utilisateur (permissions insuffisantes).',
                    ephemeral: true
                });
            }

            await interaction.guild.members.ban(user, {
                reason: reason,
                deleteMessageDays: deleteMessages
            });
            
            const embed = new EmbedBuilder()
                .setTitle('üî® Utilisateur banni')
                .setDescription(`${user} a √©t√© banni du serveur`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Messages supprim√©s', value: `${deleteMessages} jour(s)`, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                )
                .setColor(0x000000)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`üî® ${user.tag} banni par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur ban utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du bannissement de l\'utilisateur.',
                ephemeral: true
            });
        }
    }

    async unbanDiscordUser(interaction) {
        const userId = interaction.options.getString('userid');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';

        try {
            const bannedUser = await interaction.guild.bans.fetch(userId).catch(() => null);
            
            if (!bannedUser) {
                return await interaction.reply({
                    content: '‚ùå Cet utilisateur n\'est pas banni ou l\'ID est incorrect.',
                    ephemeral: true
                });
            }

            await interaction.guild.members.unban(userId, reason);
            
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ Utilisateur d√©banni')
                .setDescription(`${bannedUser.user.tag} a √©t√© d√©banni du serveur`)
                .addFields(
                    { name: 'Utilisateur', value: bannedUser.user.tag, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                )
                .setColor(0x00FF00)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`‚úÖ ${bannedUser.user.tag} d√©banni par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur unban utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors du d√©bannissement. V√©rifiez l\'ID utilisateur.',
                ephemeral: true
            });
        }
    }

    async warnUser(interaction) {
        const user = interaction.options.getUser('utilisateur');
        const reason = interaction.options.getString('raison');

        try {
            // Envoyer un MP √† l'utilisateur
            try {
                const dmEmbed = new EmbedBuilder()
                    .setTitle('‚ö†Ô∏è Avertissement')
                    .setDescription(`Vous avez re√ßu un avertissement sur **${interaction.guild.name}**`)
                    .addFields(
                        { name: 'Raison', value: reason, inline: false },
                        { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                    )
                    .setColor(0xFFAA00)
                    .setTimestamp();

                await user.send({ embeds: [dmEmbed] });
            } catch (dmError) {
                console.log(`‚ö†Ô∏è Impossible d'envoyer un MP √† ${user.tag}`);
            }

            const embed = new EmbedBuilder()
                .setTitle('‚ö†Ô∏è Avertissement donn√©')
                .setDescription(`${user} a √©t√© averti`)
                .addFields(
                    { name: 'Utilisateur', value: user.tag, inline: true },
                    { name: 'Raison', value: reason, inline: true },
                    { name: 'Mod√©rateur', value: interaction.user.tag, inline: true }
                )
                .setColor(0xFFAA00)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
            console.log(`‚ö†Ô∏è ${user.tag} averti par ${interaction.user.tag}: ${reason}`);
        } catch (error) {
            console.error('Erreur warn utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de l\'avertissement.',
                ephemeral: true
            });
        }
    }

    async showUserInfo(interaction) {
        const user = interaction.options.getUser('utilisateur') || interaction.user;
        
        try {
            const member = await interaction.guild.members.fetch(user.id);
            
            const embed = new EmbedBuilder()
                .setTitle(`üë§ Informations: ${member.displayName}`)
                .setThumbnail(user.displayAvatarURL({ dynamic: true }))
                .addFields(
                    { name: 'Nom d\'utilisateur', value: user.tag, inline: true },
                    { name: 'ID', value: user.id, inline: true },
                    { name: 'Surnom', value: member.nickname || 'Aucun', inline: true },
                    { name: 'Compte cr√©√©', value: `<t:${Math.floor(user.createdTimestamp / 1000)}:F>`, inline: true },
                    { name: 'A rejoint le serveur', value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:F>`, inline: true },
                    { name: 'Statut', value: member.presence?.status || 'Hors ligne', inline: true },
                    { name: 'R√¥le le plus √©lev√©', value: member.roles.highest.name, inline: true },
                    { name: 'Nombre de r√¥les', value: `${member.roles.cache.size - 1}`, inline: true },
                    { name: 'Permissions', value: member.permissions.has('Administrator') ? 'Administrateur' : 'Standard', inline: true }
                )
                .setColor(member.displayHexColor || 0x3498DB)
                .setTimestamp();

            // Ajouter les r√¥les si pas trop nombreux
            const roles = member.roles.cache.filter(role => role.id !== interaction.guild.id).map(role => role.name).join(', ');
            if (roles.length < 1024) {
                embed.addFields({ name: 'R√¥les', value: roles || 'Aucun r√¥le', inline: false });
            }

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Erreur userinfo:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de la r√©cup√©ration des informations utilisateur.',
                ephemeral: true
            });
        }
    }

    async listBans(interaction) {
        try {
            const bans = await interaction.guild.bans.fetch();
            
            if (bans.size === 0) {
                return await interaction.reply({
                    content: '‚úÖ Aucun utilisateur banni sur ce serveur.',
                    ephemeral: true
                });
            }

            const banList = bans.map((ban, index) => {
                const reason = ban.reason || 'Aucune raison';
                return `**${index + 1}.** ${ban.user.tag} (${ban.user.id})\nüìù Raison: ${reason}`;
            }).slice(0, 10).join('\n\n'); // Limiter √† 10 pour √©viter les messages trop longs

            const embed = new EmbedBuilder()
                .setTitle(`üî® Utilisateurs bannis (${bans.size})`)
                .setDescription(banList)
                .setColor(0x000000)
                .setTimestamp();

            if (bans.size > 10) {
                embed.setFooter({ text: `... et ${bans.size - 10} autres` });
            }

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Erreur listbans:', error);
            await interaction.reply({
                content: '‚ùå Erreur lors de la r√©cup√©ration de la liste des bannis.',
                ephemeral: true
            });
        }
    }

    // Commandes Twitch (placeholder - n√©cessite API Twitch)
    async addTwitchMod(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - addmod pour ${username}`,
            ephemeral: true
        });
    }

    async removeTwitchMod(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - removemod pour ${username}`,
            ephemeral: true
        });
    }

    async banTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - ban ${username} (${reason})`,
            ephemeral: true
        });
    }

    async timeoutTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        const duration = interaction.options.getInteger('duree');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - timeout ${username} ${duration}min (${reason})`,
            ephemeral: true
        });
    }

    async unbanTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - unban pour ${username}`,
            ephemeral: true
        });
    }

    async searchTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - recherche pour ${username}`,
            ephemeral: true
        });
    }
}

module.exports = ModerationManager;
        const duration = interaction.options.getInteger('duree');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e';
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - timeout ${username} ${duration}min (${reason})`,
            ephemeral: true
        });
    }

    async unbanTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - unban pour ${username}`,
            ephemeral: true
        });
    }

    async searchTwitchUser(interaction) {
        const username = interaction.options.getString('username');
        
        await interaction.reply({
            content: `üì∫ Fonction Twitch en d√©veloppement - recherche pour ${username}`,
            ephemeral: true
        });
    }
}

module.exports = ModerationManager;
