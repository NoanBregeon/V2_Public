/**
 * Gestionnaire des salons vocaux temporaires
 */

const { ChannelType, PermissionFlagsBits, EmbedBuilder } = require('discord.js');

class VoiceManager {
    constructor(client, config) {
        this.client = client;
        this.config = config;
        this.tempChannels = new Map(); // channelId -> creatorId
        this.channelSettings = new Map(); // channelId -> settings
    }

    async initialize() {
        console.log('‚úÖ VoiceManager initialis√©');
    }

    async handleVoiceStateUpdate(oldState, newState) {
        // Cr√©ation de salon temporaire
        if (newState.channelId === this.config.createVoiceChannelId) {
            await this.createTempVoiceChannel(newState.member);
        }

        // Suppression de salon temporaire vide
        if (oldState.channel && this.tempChannels.has(oldState.channelId)) {
            if (oldState.channel.members.size === 0) {
                await this.deleteTempVoiceChannel(oldState.channel);
            }
        }
    }

    async createTempVoiceChannel(member) {
        try {
            const guild = member.guild;
            const category = guild.channels.cache.get(this.config.voiceCategoryId);
            
            const channel = await guild.channels.create({
                name: `üé§ ${member.displayName}`,
                type: ChannelType.GuildVoice,
                parent: category,
                permissionOverwrites: [
                    {
                        id: member.id,
                        allow: [
                            PermissionFlagsBits.ManageChannels,
                            PermissionFlagsBits.MoveMembers,
                            PermissionFlagsBits.MuteMembers,
                            PermissionFlagsBits.DeafenMembers
                        ]
                    }
                ]
            });

            // D√©placer le membre dans le nouveau salon
            await member.voice.setChannel(channel);
            
            // Enregistrer le salon temporaire
            this.tempChannels.set(channel.id, member.id);
            
            console.log(`üé§ Salon vocal temporaire cr√©√©: ${channel.name} pour ${member.displayName}`);
            
            // IMPORTANT: Envoyer le message d'instructions
            await this.sendVoiceInstructions(member, channel);
            
            // Log dans le canal appropri√©
            await this.logVoiceAction('create', member, channel);
            
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation salon vocal:', error);
        }
    }

    async sendVoiceInstructions(member, channel) {
        if (!this.config.voiceInstructionsChannelId) return;
        
        try {
            const instructionsChannel = await this.client.channels.fetch(this.config.voiceInstructionsChannelId);
            if (!instructionsChannel) return;
            
            const embed = new EmbedBuilder()
                .setTitle('üé§ Salon vocal temporaire cr√©√©')
                .setDescription(`Tu as cr√©√© un salon vocal temporaire. Tu en es le propri√©taire et tu peux le g√©rer.`)
                .addFields(
                    { 
                        name: 'üëë Propri√©taire', 
                        value: `${member.toString()}`, 
                        inline: true 
                    },
                    { 
                        name: 'üîä Salon', 
                        value: `${channel.toString()}`, 
                        inline: true 
                    },
                    { 
                        name: 'üîß Commandes', 
                        value: `\`!rename <nom>\` - Renommer le salon
                        \`!limit <nombre>\` - Limiter le nombre d'utilisateurs
                        \`!lock\` - Verrouiller le salon
                        \`!unlock\` - D√©verrouiller le salon
                        \`/voice transfer <utilisateur>\` - Transf√©rer la propri√©t√©`, 
                        inline: false 
                    }
                )
                .setColor(0x3498DB)
                .setFooter({ text: 'Le salon sera supprim√© quand il sera vide' })
                .setTimestamp();
            
            await instructionsChannel.send({ 
                content: `${member.toString()} üìã`, 
                embeds: [embed] 
            });
            
        } catch (error) {
            console.error('‚ùå Erreur envoi instructions vocales:', error);
        }
    }

    async deleteTempVoiceChannel(channel) {
        try {
            const creatorId = this.tempChannels.get(channel.id);
            
            await channel.delete('Salon vocal temporaire vide');
            this.tempChannels.delete(channel.id);
            this.channelSettings.delete(channel.id);
            
            console.log(`üóëÔ∏è Salon vocal temporaire supprim√©: ${channel.name}`);
            
            // Log dans le canal appropri√©
            if (creatorId) {
                const creator = await channel.guild.members.fetch(creatorId).catch(() => null);
                await this.logVoiceAction('delete', creator, channel);
            }
            
        } catch (error) {
            console.error('‚ùå Erreur suppression salon vocal:', error);
        }
    }

    async logVoiceAction(action, member, channel) {
        if (!this.config.voiceLogsChannelId) return;
        
        try {
            const logChannel = await this.client.channels.fetch(this.config.voiceLogsChannelId);
            if (!logChannel) return;
            
            const actions = {
                create: 'üé§ **Salon vocal cr√©√©**',
                delete: 'üóëÔ∏è **Salon vocal supprim√©**',
                rename: '‚úèÔ∏è **Salon vocal renomm√©**',
                limit: 'üë• **Limite du salon modifi√©e**',
                lock: 'üîí **Salon vocal verrouill√©**',
                unlock: 'üîì **Salon vocal d√©verrouill√©**',
                transfer: 'üëë **Propri√©t√© transf√©r√©e**'
            };
            
            const message = `${actions[action] || action}
            **Salon:** ${channel.name}
            **Utilisateur:** ${member ? member.displayName : 'Inconnu'}
            **Heure:** <t:${Math.floor(Date.now() / 1000)}:F>`;
            
            await logChannel.send(message);
            
        } catch (error) {
            console.error('‚ùå Erreur log vocal:', error);
        }
    }

    // M√©thodes pour les commandes de gestion des salons vocaux
    async handleVoiceCommand(interaction, subcommand) {
        const member = interaction.member;
        const voiceChannel = member.voice.channel;
        
        if (!voiceChannel || !this.tempChannels.has(voiceChannel.id)) {
            return interaction.reply({
                content: '‚ùå Vous devez √™tre dans un salon vocal temporaire pour utiliser cette commande.',
                ephemeral: true
            });
        }
        
        const creatorId = this.tempChannels.get(voiceChannel.id);
        if (creatorId !== member.id) {
            return interaction.reply({
                content: '‚ùå Seul le propri√©taire du salon peut utiliser cette commande.',
                ephemeral: true
            });
        }
        
        switch (subcommand) {
            case 'rename':
                return this.handleRename(interaction, voiceChannel);
            case 'limit':
                return this.handleLimit(interaction, voiceChannel);
            case 'lock':
                return this.handleLock(interaction, voiceChannel);
            case 'unlock':
                return this.handleUnlock(interaction, voiceChannel);
            case 'transfer':
                return this.handleTransfer(interaction, voiceChannel);
            default:
                return interaction.reply({ content: '‚ùå Sous-commande inconnue', ephemeral: true });
        }
    }

    async handleRename(interaction, channel) {
        const newName = interaction.options.getString('nom');
        
        if (!newName || newName.length > 32) {
            return interaction.reply({
                content: '‚ùå Le nom doit contenir entre 1 et 32 caract√®res.',
                ephemeral: true
            });
        }
        
        try {
            const oldName = channel.name;
            await channel.setName(newName);
            
            await this.logVoiceAction('rename', interaction.member, channel);
            
            return interaction.reply({
                content: `‚úÖ Salon renomm√© de "${oldName}" vers "${newName}"`,
                ephemeral: true
            });
        } catch (error) {
            console.error('‚ùå Erreur renommage salon:', error);
            return interaction.reply({
                content: '‚ùå Erreur lors du renommage du salon.',
                ephemeral: true
            });
        }
    }

    async handleLimit(interaction, channel) {
        const limit = interaction.options.getInteger('nombre');
        
        if (limit < 0 || limit > 99) {
            return interaction.reply({
                content: '‚ùå La limite doit √™tre entre 0 (illimit√©) et 99.',
                ephemeral: true
            });
        }
        
        try {
            await channel.setUserLimit(limit);
            
            await this.logVoiceAction('limit', interaction.member, channel);
            
            return interaction.reply({
                content: `‚úÖ Limite du salon d√©finie √† ${limit === 0 ? 'illimit√©e' : limit + ' utilisateurs'}`,
                ephemeral: true
            });
        } catch (error) {
            console.error('‚ùå Erreur limite salon:', error);
            return interaction.reply({
                content: '‚ùå Erreur lors de la modification de la limite.',
                ephemeral: true
            });
        }
    }

    async handleLock(interaction, channel) {
        try {
            await channel.permissionOverwrites.edit(channel.guild.roles.everyone, {
                Connect: false
            });
            
            await this.logVoiceAction('lock', interaction.member, channel);
            
            return interaction.reply({
                content: 'üîí Salon verrouill√© - Personne ne peut plus rejoindre',
                ephemeral: true
            });
        } catch (error) {
            console.error('‚ùå Erreur verrouillage salon:', error);
            return interaction.reply({
                content: '‚ùå Erreur lors du verrouillage du salon.',
                ephemeral: true
            });
        }
    }

    async handleUnlock(interaction, channel) {
        try {
            await channel.permissionOverwrites.edit(channel.guild.roles.everyone, {
                Connect: null
            });
            
            await this.logVoiceAction('unlock', interaction.member, channel);
            
            return interaction.reply({
                content: 'üîì Salon d√©verrouill√© - Tout le monde peut maintenant rejoindre',
                ephemeral: true
            });
        } catch (error) {
            console.error('‚ùå Erreur d√©verrouillage salon:', error);
            return interaction.reply({
                content: '‚ùå Erreur lors du d√©verrouillage du salon.',
                ephemeral: true
            });
        }
    }

    async handleTransfer(interaction, channel) {
        const newOwner = interaction.options.getUser('utilisateur');
        
        if (!newOwner) {
            return interaction.reply({
                content: '‚ùå Vous devez sp√©cifier un utilisateur.',
                ephemeral: true
            });
        }
        
        if (newOwner.id === interaction.user.id) {
            return interaction.reply({
                content: '‚ùå Vous √™tes d√©j√† le propri√©taire de ce salon.',
                ephemeral: true
            });
        }
        
        try {
            const newOwnerMember = await interaction.guild.members.fetch(newOwner.id);
            
            if (!newOwnerMember.voice.channel || newOwnerMember.voice.channelId !== channel.id) {
                return interaction.reply({
                    content: '‚ùå L\'utilisateur doit √™tre dans le salon vocal pour en devenir propri√©taire.',
                    ephemeral: true
                });
            }
            
            // Retirer les permissions de l'ancien propri√©taire
            await channel.permissionOverwrites.edit(interaction.user.id, {
                ManageChannels: null,
                MoveMembers: null,
                MuteMembers: null,
                DeafenMembers: null
            });
            
            // Donner les permissions au nouveau propri√©taire
            await channel.permissionOverwrites.edit(newOwner.id, {
                ManageChannels: true,
                MoveMembers: true,
                MuteMembers: true,
                DeafenMembers: true
            });
            
            // Mettre √† jour le propri√©taire
            this.tempChannels.set(channel.id, newOwner.id);
            
            await this.logVoiceAction('transfer', interaction.member, channel);
            
            return interaction.reply({
                content: `‚úÖ Propri√©t√© du salon transf√©r√©e √† ${newOwner.toString()}`,
                ephemeral: false
            });
            
        } catch (error) {
            console.error('‚ùå Erreur transfert propri√©t√©:', error);
            return interaction.reply({
                content: '‚ùå Erreur lors du transfert de propri√©t√©.',
                ephemeral: true
            });
        }
    }
}

module.exports = VoiceManager;